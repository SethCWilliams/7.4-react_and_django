{"version":3,"sources":["components/JobTable.jsx","components/JobForm.jsx","container/App.jsx","serviceWorker.js","index.js"],"names":["JobTable","props","jobs","length","react_default","a","createElement","className","Object","entries","map","el","key","job","id","concat","JobForm","state","status","name","message","handleChange","e","_this","setState","defineProperty","target","value","handleSubmit","preventDefault","_this$state","addJob","_this$state2","this","onSubmit","type","onChange","required","Component","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","conf","method","body","JSON","stringify","headers","Headers","Content-Type","fetch","process","then","response","placeholder","json","push","loaded","_this2","data","loadingMessage","components_JobForm","components_JobTable","Boolean","window","location","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94bffc30.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nfunction JobTable(props){\n  var jobs = props.jobs;\n\n  return !jobs.length ? (\n    <p>No jobs</p>\n  ) : (\n    <div className=\"column\">\n      <h2 className=\"subtitle\">\n        Showing <strong>{jobs.length} items</strong>\n      </h2>\n\n      <table className=\"table is-striped\">\n        <thead>\n          <tr>\n            {Object.entries(jobs[0]).map(el => <th key={el[0]}>{el[0]}</th>)}\n          </tr>\n        </thead>\n        <tbody>\n          {jobs.map(job => (\n            <tr key={job.id}>\n              {Object.entries(job).map(el => <td key={`${job.id}-${el[0]}`}>{el[1]}</td>)}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nJobTable.propTypes = {\n  jobs: PropTypes.array.isRequired\n};\n\nexport default JobTable;\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\n\nclass JobForm extends Component {\n  state = {\n    status: \"\",\n    name: \"\",\n    message: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({[e.target.name]: e.target.value});\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {status, name, message} = this.state;\n    const job = {status, name, message};\n\n    this.props.addJob(job);\n    this.setState({status: '', name: '', message: ''});\n  };\n\n  render() {\n    const {status, name, message} = this.state;\n\n    return (\n      <div className=\"column\">\n        <form onSubmit={this.handleSubmit}>\n\n          <div className=\"field\">\n            <label className=\"label\">Status</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"status\"\n                onChange={this.handleChange}\n                value={status}\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Name</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"name\"\n                onChange={this.handleChange}\n                value={name}\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"field\">\n            <label className=\"label\">Message</label>\n            <div className=\"control\">\n              <textarea\n                className=\"textarea\"\n                type=\"text\"\n                name=\"message\"\n                onChange={this.handleChange}\n                value={message}\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <button type=\"submit\" className=\"button is-info\">\n              Send message\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default JobForm;","import React, { Component } from 'react';\nimport JobTable from '../components/JobTable.jsx';\nimport JobForm from '../components/JobForm.jsx';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      loaded: false,\n      placeholder: 'Loading...',\n      jobs: []\n    };\n  }\n\n  componentDidMount(){\n    // For development we will run django AND npm start\n    // Django will run on port 8000 while react will run on port 3000\n    // We need our API calls to point to django, so we will use process.env.REACT_APP_API_HOST\n    // process.env.REACT_APP_API_HOST is set using a .env.development file.\n    // https://facebook.github.io/create-react-app/docs/adding-custom-environment-variables\n\n    fetch(`${process.env.REACT_APP_API_HOST}/api/job/`).then((response) => {\n      if (response.status !== 200) {\n        return this.setState({placeholder: \"Something went wrong\"});\n      }\n\n      return response.json();\n    }).then((data) => {\n      this.setState({jobs: data, loaded: true});\n    });\n  }\n\n  addJob = (job) => {\n    // Optimistically add the job to the jobs array on the state\n    // const {jobs} = this.state;\n    // jobs.push(job);\n    // this.setState({jobs: jobs});\n\n    const conf = {\n      method: \"post\",\n      body: JSON.stringify(job),\n      headers: new Headers({\"Content-Type\": \"application/json\"})\n    };\n\n    fetch(`${process.env.REACT_APP_API_HOST}/api/job/`, conf).then((response) => {\n      if (response.status !== 201) {\n        // There was an error so roll back the state\n        // var jobs = this.state.jobs;\n        // jobs.pop();\n        // return this.setState({placeholder: \"Something went wrong\", jobs: jobs});\n\n        return this.setState({placeholder: \"Something went wrong\"});\n      }\n\n      return response.json();\n    }).then((job) => {\n      const {jobs} = this.state;\n      jobs.push(job);\n      this.setState({jobs: jobs});\n    });\n  };\n\n  render() {\n    if(!this.state.loaded){\n      var loadingMessage = <p className=\"alert-danger\">{this.state.placeholder}</p>;\n    }else{\n      var loadingMessage = null;\n    }\n\n    return (\n      <div className=\"App\">\n\n        {loadingMessage}\n\n        <h1>Print Jobs</h1>\n\n        <JobForm addJob={this.addJob}/>\n\n        <hr/>\n\n        <h2>Create a Print Job</h2>\n\n        <h2>Print Queue</h2>\n\n        <JobTable jobs={this.state.jobs}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './container/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}